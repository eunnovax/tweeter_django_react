{"version":3,"sources":["logo.svg","tweets/components.js","tweets/lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","Fragment","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","map","item","index","Tweet","tweet","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ade1b7e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react'\r\nimport {loadTweets} from './lookup'\r\n\r\nexport function TweetsComponent(props) {\r\n  const textAreaRef = React.createRef()\r\n  const [newTweets, setNewTweets] = useState([])\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    const newVal = textAreaRef.current.value\r\n    let tempNewTweets = [...newTweets]\r\n    // change this to a server side call\r\n    tempNewTweets = [{\r\n      content: newVal,\r\n      likes: 0,\r\n      id: 1234\r\n    }, ...tempNewTweets]\r\n    setNewTweets(tempNewTweets)\r\n    textAreaRef.current.value = ''\r\n  }\r\n  return <React.Fragment>\r\n\r\n    <div className=\"row my-3 text-center mx-auto w-50\">\r\n      <div className='col-12 '>\r\n        <form onSubmit={handleSubmit}>\r\n          <textarea  ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n\r\n          </textarea>\r\n          <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <TweetsList newTweets={newTweets} />\r\n    </React.Fragment>\r\n}\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    // setTweetsInit([...props.newTweets].concat(tweetsInit))\r\n    useEffect(() => {\r\n      const final = [...props.newTweets].concat(tweetsInit)\r\n      if (final.length !== tweets.length) {\r\n        setTweets(final)\r\n      }\r\n    }, [props.newTweets, tweetsInit, tweets])\r\n    useEffect(() => {\r\n      const myCallback = (response, status) => {\r\n        // console.log(response, status)\r\n        if (status === 200) {\r\n          setTweetsInit(response)\r\n        }\r\n      }\r\n      loadTweets(myCallback)\r\n    }, [tweetsInit])\r\n  \r\n    return tweets.map((item, index) => {\r\n      return <Tweet tweet={item} key={index} className='mx-auto w-50 my-5 p-5 border bg-white text-dark text-center' />\r\n    })\r\n}\r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action} = props\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\r\n    const [userLike, setUserLike] = useState(tweet.userLike ? true : false)\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'like') {\r\n            if(userLike) {\r\n                // unlike\r\n                setLikes(likes - 1)\r\n                setUserLike(false)\r\n            } else {\r\n                setLikes(likes + 1)\r\n                setUserLike(true)\r\n            }\r\n        }\r\n    }\r\n    return <button className={className} onClick={handleClick}>{display} </button> \r\n  }\r\n  \r\nexport function Tweet(props) {\r\nconst {tweet} = props\r\nconst className = props.className ? props.className : 'col-10 col-md-6 mx-auto' \r\nreturn <div className={className}>\r\n    <p>{tweet.id} - {tweet.content}</p>\r\n    <div className='btn btn-group'>\r\n    <ActionBtn tweet={tweet} action={{type: \"like\", display: \"Likes\"}} />\r\n    <ActionBtn tweet={tweet} action={{type: \"unlike\", display: \"Unlike\"}} />\r\n    <ActionBtn tweet={tweet} action={{type: \"retweet\", display: \"Retweet\"}} />\r\n    </div>\r\n</div>\r\n}","export const loadTweets = (callback) => {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET' //'POST'\r\n    const url = 'http://127.0.0.1:8000/api/tweets/'\r\n    const responseType = \"json\"\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function() {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"The request was an error\"}, 400)\r\n    }\r\n    xhr.send() //triggers the request\r\n}\r\n","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './tweets'\n\n\nfunction App() {\n  \n  return (\n    <React.Fragment>\n    \n    <TweetsComponent />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );  \n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}